// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShopProject.EFDB.Models;

#nullable disable

namespace ShopProject.EFDB.Migrations
{
    [DbContext(typeof(ShopProjectDbContext))]
    [Migration("20240316174051_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ShopProject.EFDB.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Category_name");

                    b.HasKey("CategoryId")
                        .HasName("Categories_pkey");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.OrderConsignment", b =>
                {
                    b.Property<int>("OrderConsignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Order_consignment_id")
                        .HasDefaultValueSql("nextval('\"Accepting_orders_Consignment_id_seq\"'::regclass)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Date_time");

                    b.Property<int>("WorkerId")
                        .HasColumnType("integer")
                        .HasColumnName("Worker_id");

                    b.HasKey("OrderConsignmentId")
                        .HasName("Accepting_orders_pkey");

                    b.HasIndex("WorkerId");

                    b.ToTable("Order_consignments", (string)null);
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Payment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int?>("ApprovierWorkerId")
                        .HasColumnType("integer")
                        .HasColumnName("Approvier_worker_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("Is_approved");

                    b.Property<int>("RecipientWorkerId")
                        .HasColumnType("integer")
                        .HasColumnName("Recipient_worker_id");

                    b.Property<int>("ShopId")
                        .HasColumnType("integer")
                        .HasColumnName("Shop_id");

                    b.HasKey("PaymentId")
                        .HasName("Payments_pkey");

                    b.HasIndex("ApprovierWorkerId");

                    b.HasIndex("RecipientWorkerId");

                    b.HasIndex("ShopId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Position_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PositionId"));

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Position_name");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("Role_id");

                    b.Property<int>("SalaryTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("Salary_type_id");

                    b.HasKey("PositionId")
                        .HasName("Positions_pkey");

                    b.HasIndex("RoleId");

                    b.HasIndex("SalaryTypeId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Product_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("BuyCost")
                        .HasColumnType("money")
                        .HasColumnName("Buy_cost");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("Category_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Product_name");

                    b.Property<decimal>("SellCost")
                        .HasColumnType("money")
                        .HasColumnName("Sell_cost");

                    b.HasKey("ProductId")
                        .HasName("Products_pkey");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.ProductConsignment", b =>
                {
                    b.Property<int>("ProductConsignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Product_consignment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductConsignmentId"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Date_time");

                    b.Property<int>("OrderConsignmentId")
                        .HasColumnType("integer")
                        .HasColumnName("Order_consignment_id");

                    b.Property<int>("WorkerId")
                        .HasColumnType("integer")
                        .HasColumnName("Worker_id");

                    b.HasKey("ProductConsignmentId")
                        .HasName("Product_consignments_pkey");

                    b.HasIndex("OrderConsignmentId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Product_consignments", (string)null);
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.ProductConsignmentProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("Product_id");

                    b.Property<int>("ProductConsignmentId")
                        .HasColumnType("integer")
                        .HasColumnName("Product_consignment_id");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "ProductConsignmentId")
                        .HasName("Product_consignment_product_pkey");

                    b.HasIndex("ProductConsignmentId");

                    b.ToTable("Product_consignment_product", (string)null);
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.ProductOrder", b =>
                {
                    b.Property<int>("ProductOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Product_order_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductOrderId"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Date_time");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("Is_approved");

                    b.Property<int>("OrderConsignmentId")
                        .HasColumnType("integer")
                        .HasColumnName("Order_consignment_id");

                    b.Property<int>("WorkerId")
                        .HasColumnType("integer")
                        .HasColumnName("Worker_id");

                    b.HasKey("ProductOrderId")
                        .HasName("Product_orders_pkey");

                    b.HasIndex("OrderConsignmentId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Product_orders", (string)null);
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.ProductOrderProductInStorage", b =>
                {
                    b.Property<int>("ProductOrderId")
                        .HasColumnType("integer")
                        .HasColumnName("Product_order_id");

                    b.Property<int>("ProductInStorageId")
                        .HasColumnType("integer")
                        .HasColumnName("Product_in_storage_id");

                    b.Property<int>("ProductCount")
                        .HasColumnType("integer")
                        .HasColumnName("Product_count");

                    b.HasKey("ProductOrderId", "ProductInStorageId")
                        .HasName("Product_order_product_in_storage_pkey");

                    b.HasIndex("ProductInStorageId");

                    b.ToTable("Product_order_product_in_storage", (string)null);
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.ProductsInStorage", b =>
                {
                    b.Property<int>("ProductInStorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Product_in_storage_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductInStorageId"));

                    b.Property<int>("ProductCount")
                        .HasColumnType("integer")
                        .HasColumnName("Product_count");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("Product_id");

                    b.Property<int>("ShopId")
                        .HasColumnType("integer")
                        .HasColumnName("Shop_id");

                    b.HasKey("ProductInStorageId")
                        .HasName("Products_in_storage_pkey");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShopId");

                    b.ToTable("Products_in_storage", (string)null);
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Purchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Purchase_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PurchaseId"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Date_time");

                    b.Property<int>("WorkerId")
                        .HasColumnType("integer")
                        .HasColumnName("Worker_id");

                    b.HasKey("PurchaseId")
                        .HasName("Purchases_pkey");

                    b.HasIndex("WorkerId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.PurchaseProductInStorage", b =>
                {
                    b.Property<int>("PurchaseId")
                        .HasColumnType("integer")
                        .HasColumnName("Purchase_id");

                    b.Property<int>("ProductsInStorageId")
                        .HasColumnType("integer")
                        .HasColumnName("Products_in_storage_id");

                    b.Property<int>("ProductCount")
                        .HasColumnType("integer")
                        .HasColumnName("Product_count");

                    b.HasKey("PurchaseId", "ProductsInStorageId")
                        .HasName("Purchase_product_in_storage_pkey");

                    b.HasIndex("ProductsInStorageId");

                    b.ToTable("Purchase_product_in_storage", (string)null);
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Refund", b =>
                {
                    b.Property<int>("RefundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Refund_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RefundId"));

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("time with time zone")
                        .HasColumnName("Date_Time");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("integer")
                        .HasColumnName("Purchase_id");

                    b.Property<int>("WorkerId")
                        .HasColumnType("integer")
                        .HasColumnName("Worker_id");

                    b.HasKey("RefundId")
                        .HasName("Refunds_pkey");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Refunds");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.RefundProductInStorage", b =>
                {
                    b.Property<int>("RefundId")
                        .HasColumnType("integer")
                        .HasColumnName("Refund_id");

                    b.Property<int>("ProductInStorageId")
                        .HasColumnType("integer")
                        .HasColumnName("Product_in_storage_id");

                    b.Property<int>("ProductCount")
                        .HasColumnType("integer")
                        .HasColumnName("Product_count");

                    b.HasKey("RefundId", "ProductInStorageId")
                        .HasName("Refund_product_in_storage_pkey");

                    b.HasIndex("ProductInStorageId");

                    b.ToTable("Refund_product_in_storage", (string)null);
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Region_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RegionId"));

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Region_name");

                    b.HasKey("RegionId")
                        .HasName("Regions_pkey");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.RegionPlan", b =>
                {
                    b.Property<int>("RegionPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Region_plan_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RegionPlanId"));

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("End_date");

                    b.Property<decimal>("Profit")
                        .HasColumnType("money");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("Region_id");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("Start_date");

                    b.Property<int>("Turnover")
                        .HasColumnType("integer");

                    b.HasKey("RegionPlanId")
                        .HasName("Region_plans_pkey");

                    b.HasIndex("RegionId");

                    b.ToTable("Region_plans", (string)null);
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Role_name");

                    b.HasKey("RoleId")
                        .HasName("Roles_pkey");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.SalaryType", b =>
                {
                    b.Property<int>("SalaryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Salary_type_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SalaryTypeId"));

                    b.Property<string>("SalaryTypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Salary_type_name");

                    b.HasKey("SalaryTypeId")
                        .HasName("Salary_types_pkey");

                    b.ToTable("Salary_types", (string)null);
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Shop", b =>
                {
                    b.Property<int>("ShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Shop_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShopId"));

                    b.Property<string>("Addres")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("Region_id");

                    b.Property<int>("ShopTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("Shop_type_id");

                    b.HasKey("ShopId")
                        .HasName("Shops_pkey");

                    b.HasIndex("RegionId");

                    b.HasIndex("ShopTypeId");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.ShopPlan", b =>
                {
                    b.Property<int>("ShopPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Shop_plan_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShopPlanId"));

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("End_date");

                    b.Property<decimal>("Profit")
                        .HasColumnType("money");

                    b.Property<int>("ShopId")
                        .HasColumnType("integer")
                        .HasColumnName("Shop_id");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("Start_date");

                    b.Property<int>("Turnovet")
                        .HasColumnType("integer");

                    b.HasKey("ShopPlanId")
                        .HasName("Shop_plans_pkey");

                    b.HasIndex("ShopId");

                    b.ToTable("Shop_plans", (string)null);
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.ShopPosition", b =>
                {
                    b.Property<int>("ShopPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Shop_position_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShopPositionId"));

                    b.Property<int>("PositionId")
                        .HasColumnType("integer")
                        .HasColumnName("Position_id");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("money");

                    b.Property<int>("ShopId")
                        .HasColumnType("integer")
                        .HasColumnName("Shop_id");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("integer")
                        .HasColumnName("Worker_id");

                    b.HasKey("ShopPositionId")
                        .HasName("Shop_positions_pkey");

                    b.HasIndex("PositionId");

                    b.HasIndex("ShopId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Shop_positions", (string)null);
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.ShopType", b =>
                {
                    b.Property<int>("ShopTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Shop_type_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShopTypeId"));

                    b.Property<string>("ShopTypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Shop_type_name");

                    b.HasKey("ShopTypeId")
                        .HasName("Shop_types_pkey");

                    b.ToTable("Shop_types", (string)null);
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.TestTable", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TestId"));

                    b.Property<string>("TestText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TextToUpdate")
                        .HasColumnType("text");

                    b.HasKey("TestId")
                        .HasName("TestTable_pkey");

                    b.ToTable("TestTable", (string)null);
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Worker", b =>
                {
                    b.Property<int>("WorkerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Worker_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkerId"));

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WorkerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("Worker_type_id");

                    b.HasKey("WorkerId")
                        .HasName("Workers_pkey");

                    b.HasIndex("WorkerTypeId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.WorkerType", b =>
                {
                    b.Property<int>("WorkerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Worker_type_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkerTypeId"));

                    b.Property<string>("WorkerTypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Worker_type_name");

                    b.HasKey("WorkerTypeId")
                        .HasName("Worker_types_pkey");

                    b.ToTable("Worker_types", (string)null);
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.OrderConsignment", b =>
                {
                    b.HasOne("ShopProject.EFDB.Models.Worker", "Worker")
                        .WithMany("OrderConsignments")
                        .HasForeignKey("WorkerId")
                        .IsRequired()
                        .HasConstraintName("Accepting_orders_Worker_id_fkey");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Payment", b =>
                {
                    b.HasOne("ShopProject.EFDB.Models.Worker", "ApprovierWorker")
                        .WithMany("PaymentApprovierWorkers")
                        .HasForeignKey("ApprovierWorkerId")
                        .HasConstraintName("Payments_Approvier_worker_id_fkey");

                    b.HasOne("ShopProject.EFDB.Models.Worker", "RecipientWorker")
                        .WithMany("PaymentRecipientWorkers")
                        .HasForeignKey("RecipientWorkerId")
                        .IsRequired()
                        .HasConstraintName("Payments_Recipient_worker_id_fkey");

                    b.HasOne("ShopProject.EFDB.Models.Shop", "Shop")
                        .WithMany("Payments")
                        .HasForeignKey("ShopId")
                        .IsRequired()
                        .HasConstraintName("Payments_Shop_id_fkey");

                    b.Navigation("ApprovierWorker");

                    b.Navigation("RecipientWorker");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Position", b =>
                {
                    b.HasOne("ShopProject.EFDB.Models.Role", "Role")
                        .WithMany("Positions")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("Positions_Role_id_fkey");

                    b.HasOne("ShopProject.EFDB.Models.SalaryType", "SalaryType")
                        .WithMany("Positions")
                        .HasForeignKey("SalaryTypeId")
                        .IsRequired()
                        .HasConstraintName("Positions_Salary_type_id_fkey");

                    b.Navigation("Role");

                    b.Navigation("SalaryType");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Product", b =>
                {
                    b.HasOne("ShopProject.EFDB.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("Products_Category_id_fkey");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.ProductConsignment", b =>
                {
                    b.HasOne("ShopProject.EFDB.Models.OrderConsignment", "OrderConsignment")
                        .WithMany("ProductConsignments")
                        .HasForeignKey("OrderConsignmentId")
                        .IsRequired()
                        .HasConstraintName("Product_consignments_Order_consignment_id_fkey");

                    b.HasOne("ShopProject.EFDB.Models.Worker", "Worker")
                        .WithMany("ProductConsignments")
                        .HasForeignKey("WorkerId")
                        .IsRequired()
                        .HasConstraintName("Product_consignments_Worker_id_fkey");

                    b.Navigation("OrderConsignment");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.ProductConsignmentProduct", b =>
                {
                    b.HasOne("ShopProject.EFDB.Models.ProductConsignment", "ProductConsignment")
                        .WithMany("ProductConsignmentProducts")
                        .HasForeignKey("ProductConsignmentId")
                        .IsRequired()
                        .HasConstraintName("Product_consignment_product_Product_consignment_id_fkey");

                    b.HasOne("ShopProject.EFDB.Models.Product", "Product")
                        .WithMany("ProductConsignmentProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("Product_consignment_product_Product_id_fkey");

                    b.Navigation("Product");

                    b.Navigation("ProductConsignment");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.ProductOrder", b =>
                {
                    b.HasOne("ShopProject.EFDB.Models.OrderConsignment", "OrderConsignment")
                        .WithMany("ProductOrders")
                        .HasForeignKey("OrderConsignmentId")
                        .IsRequired()
                        .HasConstraintName("Product_orders_Consigment_id_fkey");

                    b.HasOne("ShopProject.EFDB.Models.Worker", "Worker")
                        .WithMany("ProductOrders")
                        .HasForeignKey("WorkerId")
                        .IsRequired()
                        .HasConstraintName("Product_orders_Worker_id_fkey");

                    b.Navigation("OrderConsignment");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.ProductOrderProductInStorage", b =>
                {
                    b.HasOne("ShopProject.EFDB.Models.ProductsInStorage", "ProductInStorage")
                        .WithMany("ProductOrderProductInStorages")
                        .HasForeignKey("ProductInStorageId")
                        .IsRequired()
                        .HasConstraintName("Product_order_product_in_storage_Product_in_storage_id_fkey");

                    b.HasOne("ShopProject.EFDB.Models.ProductOrder", "ProductOrder")
                        .WithMany("ProductOrderProductInStorages")
                        .HasForeignKey("ProductOrderId")
                        .IsRequired()
                        .HasConstraintName("Product_order_product_in_storage_Product_order_id_fkey");

                    b.Navigation("ProductInStorage");

                    b.Navigation("ProductOrder");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.ProductsInStorage", b =>
                {
                    b.HasOne("ShopProject.EFDB.Models.Product", "Product")
                        .WithMany("ProductsInStorages")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("Products_in_storage_Product_id_fkey");

                    b.HasOne("ShopProject.EFDB.Models.Shop", "Shop")
                        .WithMany("ProductsInStorages")
                        .HasForeignKey("ShopId")
                        .IsRequired()
                        .HasConstraintName("Products_in_storage_Shop_id_fkey");

                    b.Navigation("Product");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Purchase", b =>
                {
                    b.HasOne("ShopProject.EFDB.Models.Worker", "Worker")
                        .WithMany("Purchases")
                        .HasForeignKey("WorkerId")
                        .IsRequired()
                        .HasConstraintName("Purchases_Worker_id_fkey");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.PurchaseProductInStorage", b =>
                {
                    b.HasOne("ShopProject.EFDB.Models.ProductsInStorage", "ProductsInStorage")
                        .WithMany("PurchaseProductInStorages")
                        .HasForeignKey("ProductsInStorageId")
                        .IsRequired()
                        .HasConstraintName("Purchase_product_in_storage_Products_in_storage_id_fkey");

                    b.HasOne("ShopProject.EFDB.Models.Purchase", "Purchase")
                        .WithMany("PurchaseProductInStorages")
                        .HasForeignKey("PurchaseId")
                        .IsRequired()
                        .HasConstraintName("Purchase_product_in_storage_Purchase_id_fkey");

                    b.Navigation("ProductsInStorage");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Refund", b =>
                {
                    b.HasOne("ShopProject.EFDB.Models.Purchase", "Purchase")
                        .WithMany("Refunds")
                        .HasForeignKey("PurchaseId")
                        .IsRequired()
                        .HasConstraintName("Refunds_Purchase_id_fkey");

                    b.HasOne("ShopProject.EFDB.Models.Worker", "Worker")
                        .WithMany("Refunds")
                        .HasForeignKey("WorkerId")
                        .IsRequired()
                        .HasConstraintName("Refunds_Worker_id_fkey");

                    b.Navigation("Purchase");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.RefundProductInStorage", b =>
                {
                    b.HasOne("ShopProject.EFDB.Models.ProductsInStorage", "ProductInStorage")
                        .WithMany("RefundProductInStorages")
                        .HasForeignKey("ProductInStorageId")
                        .IsRequired()
                        .HasConstraintName("Refund_product_in_storage_Product_in_storage_id_fkey");

                    b.HasOne("ShopProject.EFDB.Models.Refund", "Refund")
                        .WithMany("RefundProductInStorages")
                        .HasForeignKey("RefundId")
                        .IsRequired()
                        .HasConstraintName("Refund_product_in_storage_Refund_id_fkey");

                    b.Navigation("ProductInStorage");

                    b.Navigation("Refund");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.RegionPlan", b =>
                {
                    b.HasOne("ShopProject.EFDB.Models.Region", "Region")
                        .WithMany("RegionPlans")
                        .HasForeignKey("RegionId")
                        .IsRequired()
                        .HasConstraintName("Region_plans_Region_id_fkey");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Shop", b =>
                {
                    b.HasOne("ShopProject.EFDB.Models.Region", "Region")
                        .WithMany("Shops")
                        .HasForeignKey("RegionId")
                        .IsRequired()
                        .HasConstraintName("Shops_Region_id_fkey");

                    b.HasOne("ShopProject.EFDB.Models.ShopType", "ShopType")
                        .WithMany("Shops")
                        .HasForeignKey("ShopTypeId")
                        .IsRequired()
                        .HasConstraintName("Shops_Shop_type_id_fkey");

                    b.Navigation("Region");

                    b.Navigation("ShopType");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.ShopPlan", b =>
                {
                    b.HasOne("ShopProject.EFDB.Models.Shop", "Shop")
                        .WithMany("ShopPlans")
                        .HasForeignKey("ShopId")
                        .IsRequired()
                        .HasConstraintName("Shop_plans_Shop_id_fkey");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.ShopPosition", b =>
                {
                    b.HasOne("ShopProject.EFDB.Models.Position", "Position")
                        .WithMany("ShopPositions")
                        .HasForeignKey("PositionId")
                        .IsRequired()
                        .HasConstraintName("Shop_positions_Position_id_fkey");

                    b.HasOne("ShopProject.EFDB.Models.Shop", "Shop")
                        .WithMany("ShopPositions")
                        .HasForeignKey("ShopId")
                        .IsRequired()
                        .HasConstraintName("Shop_positions_Shop_id_fkey");

                    b.HasOne("ShopProject.EFDB.Models.Worker", "Worker")
                        .WithMany("ShopPositions")
                        .HasForeignKey("WorkerId")
                        .HasConstraintName("Shop_positions_Worker_id_fkey");

                    b.Navigation("Position");

                    b.Navigation("Shop");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Worker", b =>
                {
                    b.HasOne("ShopProject.EFDB.Models.WorkerType", "WorkerType")
                        .WithMany("Workers")
                        .HasForeignKey("WorkerTypeId")
                        .IsRequired()
                        .HasConstraintName("Workers_Worker_type_id_fkey");

                    b.Navigation("WorkerType");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.OrderConsignment", b =>
                {
                    b.Navigation("ProductConsignments");

                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Position", b =>
                {
                    b.Navigation("ShopPositions");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Product", b =>
                {
                    b.Navigation("ProductConsignmentProducts");

                    b.Navigation("ProductsInStorages");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.ProductConsignment", b =>
                {
                    b.Navigation("ProductConsignmentProducts");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.ProductOrder", b =>
                {
                    b.Navigation("ProductOrderProductInStorages");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.ProductsInStorage", b =>
                {
                    b.Navigation("ProductOrderProductInStorages");

                    b.Navigation("PurchaseProductInStorages");

                    b.Navigation("RefundProductInStorages");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Purchase", b =>
                {
                    b.Navigation("PurchaseProductInStorages");

                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Refund", b =>
                {
                    b.Navigation("RefundProductInStorages");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Region", b =>
                {
                    b.Navigation("RegionPlans");

                    b.Navigation("Shops");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Role", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.SalaryType", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Shop", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("ProductsInStorages");

                    b.Navigation("ShopPlans");

                    b.Navigation("ShopPositions");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.ShopType", b =>
                {
                    b.Navigation("Shops");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.Worker", b =>
                {
                    b.Navigation("OrderConsignments");

                    b.Navigation("PaymentApprovierWorkers");

                    b.Navigation("PaymentRecipientWorkers");

                    b.Navigation("ProductConsignments");

                    b.Navigation("ProductOrders");

                    b.Navigation("Purchases");

                    b.Navigation("Refunds");

                    b.Navigation("ShopPositions");
                });

            modelBuilder.Entity("ShopProject.EFDB.Models.WorkerType", b =>
                {
                    b.Navigation("Workers");
                });
#pragma warning restore 612, 618
        }
    }
}
